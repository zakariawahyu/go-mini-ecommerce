basePath: /api/v1/
definitions:
  domain.Cart:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  domain.CartWithProduct:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      product:
        $ref: '#/definitions/domain.ProductWithCategory'
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  domain.Category:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  domain.CategoryRes:
    properties:
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      slug:
        type: string
    type: object
  domain.Customer:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  domain.CustomerRes:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  domain.OrderItem:
    properties:
      amount:
        type: number
      created_at:
        type: string
      id:
        type: string
      order_id:
        type: string
      product:
        $ref: '#/definitions/domain.Product'
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  domain.OrderItemRes:
    properties:
      amount:
        type: number
      created_at:
        type: string
      id:
        type: string
      order_id:
        type: string
      product:
        $ref: '#/definitions/domain.ProductWithCategory'
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  domain.OrderRes:
    properties:
      created_at:
        type: string
      customer:
        $ref: '#/definitions/domain.CustomerRes'
      customer_id:
        type: string
      id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/domain.OrderItemRes'
        type: array
      status:
        $ref: '#/definitions/domain.OrderStatus'
      total_price:
        type: number
      updated_at:
        type: string
    type: object
  domain.OrderStatus:
    enum:
    - in-progress
    - done
    type: string
    x-enum-varnames:
    - OrderStatusInProgress
    - OrderStatusDone
  domain.Payment:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      order_id:
        type: string
      payment_token:
        type: string
      payment_url:
        type: string
      updated_at:
        type: string
    type: object
  domain.Product:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: integer
      slug:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  domain.ProductWithCategory:
    properties:
      category:
        $ref: '#/definitions/domain.CategoryRes'
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: integer
      slug:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  paging.Pagination:
    properties:
      current_page:
        type: integer
      limit:
        type: integer
      skip:
        type: integer
      total:
        type: integer
      total_page:
        type: integer
    type: object
  req.CartCreateReq:
    properties:
      customer_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  req.CartUpdateReq:
    properties:
      customer_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  req.Carts:
    properties:
      cart_id:
        type: string
    type: object
  req.CategoryCreateReq:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  req.CategoryUpdateReq:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  req.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  req.OrderCreateReq:
    properties:
      carts:
        items:
          $ref: '#/definitions/req.Carts'
        type: array
      customer_id:
        type: string
    type: object
  req.ProductCreateReq:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: integer
      slug:
        type: string
      stock:
        type: integer
    type: object
  req.ProductUpdateReq:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: integer
      slug:
        type: string
      stock:
        type: integer
    type: object
  req.RegisterReq:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  res.ListCarts:
    properties:
      carts:
        items:
          $ref: '#/definitions/domain.CartWithProduct'
        type: array
      pagination:
        $ref: '#/definitions/paging.Pagination'
    type: object
  res.ListCategories:
    properties:
      categories:
        items:
          $ref: '#/definitions/domain.Category'
        type: array
      pagination:
        $ref: '#/definitions/paging.Pagination'
    type: object
  res.ListProducts:
    properties:
      pagination:
        $ref: '#/definitions/paging.Pagination'
      products:
        items:
          $ref: '#/definitions/domain.ProductWithCategory'
        type: array
    type: object
  res.OrderWithPaymentRes:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/domain.OrderItem'
        type: array
      payment:
        $ref: '#/definitions/domain.Payment'
      status:
        $ref: '#/definitions/domain.OrderStatus'
      total_price:
        type: number
      updated_at:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: integer
      errors: {}
      success:
        type: boolean
    type: object
  response.SuccessResponse:
    properties:
      code:
        type: integer
      data: {}
      success:
        type: boolean
    type: object
info:
  contact:
    email: zakarianur6@gmail.com
    name: Zakaria Wahyu
  description: Go Mini Ecommerce
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang Mini Ecommerce API
  version: "1.0"
paths:
  /cart:
    get:
      description: Get all carts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.ListCarts'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all carts
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Create new cart
      parameters:
      - description: Create Cart
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.CartCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create new cart
      tags:
      - Cart
  /cart/{id}:
    delete:
      description: Delete cart by id
      parameters:
      - description: cart id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete cart by id
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update single cart by id
      parameters:
      - description: cart id
        in: path
        name: id
        required: true
        type: string
      - description: Update Cart
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.CartUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Cart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update single cart
      tags:
      - Cart
  /category:
    get:
      description: Get all category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.ListCategories'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all category
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create new category
      parameters:
      - description: Create category
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.CategoryCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create new category
      tags:
      - Category
  /category/{id}:
    put:
      consumes:
      - application/json
      description: Update single category by id
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      - description: Update category
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.CategoryUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update single category
      tags:
      - Category
  /category/{slug}:
    get:
      description: Get single order by id
      parameters:
      - description: order id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OrderRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get order by id
      tags:
      - Order
  /login:
    post:
      consumes:
      - application/json
      description: Login customer
      parameters:
      - description: Login customer
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login customer
      tags:
      - Auth
  /order:
    post:
      consumes:
      - application/json
      description: Create new order
      parameters:
      - description: Create order
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.OrderCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.OrderWithPaymentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create new order
      tags:
      - Order
  /product:
    get:
      description: Get all product
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.ListProducts'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all product
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create new product
      parameters:
      - description: Create product
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.ProductCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create new product
      tags:
      - Product
  /product/{id}:
    put:
      consumes:
      - application/json
      description: Update single product by id
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: string
      - description: Update product
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.ProductUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update single product
      tags:
      - Product
  /product/{slug}:
    get:
      description: Get single product by slug
      parameters:
      - description: product slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProductWithCategory'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get product by slug
      tags:
      - Product
  /register:
    post:
      consumes:
      - application/json
      description: Register customer
      parameters:
      - description: Register customer
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/req.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register customer
      tags:
      - Auth
swagger: "2.0"
